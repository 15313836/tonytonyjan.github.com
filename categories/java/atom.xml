<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | 不歸錄]]></title>
  <link href="http://tonytonyjan.github.com/categories/java/atom.xml" rel="self"/>
  <link href="http://tonytonyjan.github.com/"/>
  <updated>2012-05-02T15:49:44+08:00</updated>
  <id>http://tonytonyjan.github.com/</id>
  <author>
    <name><![CDATA[大兜]]></name>
    <email><![CDATA[tonytonyjan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Concept of Java Thread and Socket]]></title>
    <link href="http://tonytonyjan.github.com/2010/05/07/concept-of-java-thread-and-socket/"/>
    <updated>2010-05-07T17:02:52+08:00</updated>
    <id>http://tonytonyjan.github.com/2010/05/07/concept-of-java-thread-and-socket</id>
    <content type="html"><![CDATA[<iframe src="https://docs.google.com/present/embed?id=dfdphq6m_16gtjmk7hh&size=m" frameborder="0" width="555" height="451"></iframe>


<p>當蔡神的小助教也要半個學期了，發現一些可愛的學弟妹到了學期中竟然還不懂什麼叫做物件，讓我有點憂心，所以藉著這次Lab12的機會來好好調校一下學弟妹= =+</p>

<p>短短二十五張已經是最短極限，再濃縮就沒東西了……感覺還有很多東西沒有講……</p>

<!-- more -->


<p>``` java
/<em>
 * Copyright 2010 CSsula.twgg.org. All Rights Reserved.
 * Author: Tony Jian
 * Descriptoin: Simply demostrate two ways to use Thread
 * Usage: java thread.ThreadDemo
 </em>/</p>

<p>package thread;</p>

<p>public class ThreadDemo {</p>

<pre><code>public static void main(String[] args) {
    new ThreadA().start();
    new Thread(new RunnableB()).start();
}
</code></pre>

<p>}</p>

<p>class ThreadA extends Thread {</p>

<pre><code>@Override
public void run() {
    int i = 0;
    while (true)
        System.out.printf("ThreadA: %d\n", i++);
}
</code></pre>

<p>}</p>

<p>class RunnableB implements Runnable {</p>

<pre><code>@Override
public void run() {
    int i = 0;
    while (true)
        System.out.printf("ThreadB: %d\n", i++);
}
</code></pre>

<p>}
```</p>

<p>``` java
/<em>
 * Copyright 2010 CSsula.twgg.org. All Rights Reserved.
 * Author: Tony Jian
 * Descriptoin: Simply demostrate two ways to use Thread
 * Usage: java net.InetAddressDemo
 </em>/</p>

<p>package net;</p>

<p>import java.net.*;</p>

<p>public class InetAddressDemo {</p>

<pre><code>public static void main(String[] args) {
    try {
        //getLocalHost
        InetAddress local = InetAddress.getLocalHost();
        System.out.println(local);
        System.out.println(local.getHostName());
        System.out.println(local.getHostAddress());
        System.out.println();

        //getByName
        InetAddress cssula = InetAddress.getByName("cssula.twgg.org");
        System.out.println(cssula);
        System.out.println(cssula.getHostName());
        System.out.println(cssula.getHostAddress());
        System.out.println();

        //getAllByName
        InetAddress[] google = InetAddress.getAllByName("google.com.tw");
        for (InetAddress i : google) {
            System.out.println(i);
        }
    } catch (UnknownHostException e) {
        System.err.println("Unknow Host");
    }
}
</code></pre>

<p>}
```</p>

<p>``` java
/<em>
 * Copyright 2010 CSsula.twgg.org. All Rights Reserved.
 * Author: Tony Jian
 * Descriptoin: An example of scanning ports from host
 * Usage: java net.ScanPort
 </em>/</p>

<p>package net;</p>

<p>import java.net.<em>;
import java.io.</em>;</p>

<p>public class ScanPort extends Thread {</p>

<pre><code>public static String usage = "Usage: java net.ScanPort ";
private final int port;
private final String hostName;

public ScanPort(String hostName, int port) {
    this.port = port;
    this.hostName = hostName;
}

public static void main(String[] args) {
    try {
        if(args.length == 1)
            for (int i = 0; i &amp;lt; 1024; i++)
                new ScanPort(args[0], i).start();
        else
            System.err.println(usage);
    } catch (Exception e) {
        System.err.println(usage);
    }
}

@Override
public void run() {
    try {
        InetAddress address = InetAddress.getByName(hostName);
        try {
            Socket socket = new Socket(address, port); // The port is open if socket was created succeefully.
            System.out.printf("%nPort: %d Opened..", port);
            socket.close();
        } catch (IOException e) {
            System.out.print("."); // The port isn't open if socket throws IOException.
        }
    } catch (UnknownHostException e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>}
```</p>

<p>``` java
/<em>
 * Copyright 2010 CSsula.twgg.org. All Rights Reserved.
 * Author: Tony Jian
 * Descriptoin: An example of multithreading echo server
 * Usage: java net.EchoServer
 </em>/</p>

<p>package net;</p>

<p>import java.net.<em>;
import java.io.</em>;</p>

<p>public class EchoServer extends Thread {</p>

<pre><code>public static String usage = "Usage: java net.EchoServer ";
private final int port;
private ServerSocket srvSock;
private Socket clnSock;

public EchoServer(int port) {
    this.port = port;
    try {
        srvSock = new ServerSocket(port);
    } catch (IOException e) {
        System.err.println(e);
    }
}

public static void main(String[] args) {
    try {
        if (args.length == 1)
            new EchoServer(Integer.parseInt(args[0])).start();
        else
            System.err.println(usage);
    } catch (Exception e) {
        System.err.println(usage);
    }
}

@Override
public void run() {
    try {
        while (true) {
            System.out.printf("Server: Port %d waiting for connection...\n", port);
            clnSock = srvSock.accept();
            System.out.printf("Server: connected with %s\n", clnSock.getInetAddress().getHostAddress().toString());
            new EchoChildServer(clnSock).start();
        }
    } catch (IOException e) {
        System.err.println(e);
    }
}

class EchoChildServer extends Thread {

    private Socket clnSock;
    private BufferedReader sockIn;
    private PrintStream sockOut;

    public EchoChildServer(Socket clnSock) {
        try {
            this.clnSock = clnSock;
            sockIn = new BufferedReader(new InputStreamReader(clnSock.getInputStream()));
            sockOut = new PrintStream(clnSock.getOutputStream());
        } catch (IOException e) {
            System.err.println(e);
        }
    }

    @Override
    public void run() {
        try {
            String message;
            while ((message = sockIn.readLine()) != null) {
                if (message.equals("/bye")) {
                    break;
                }
                System.out.printf("%s: %s\n", clnSock.getInetAddress().getHostAddress().toString(), message);
                sockOut.printf("echo: %s\n", message);
            }
            System.out.printf("Server: %s leaved\n", clnSock.getInetAddress().getHostAddress().toString());
            clnSock.close();
        } catch (IOException e) {
            System.err.println(e);
        }
    }
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Telnet]]></title>
    <link href="http://tonytonyjan.github.com/2010/04/30/java-telnet/"/>
    <updated>2010-04-30T10:05:37+08:00</updated>
    <id>http://tonytonyjan.github.com/2010/04/30/java-telnet</id>
    <content type="html"><![CDATA[<p>今天要來玩什麼好玩的呢？話說明天還有期中考，大兜竟然還有閒情逸致在這裡敲鍵盤（心虛中）……</p>

<p>不知道各位有沒有用過 telnet 的經驗，至少也打過類似 <code>telnet ptt.cc 23</code> 的指令吧？其實 telnet 不只可以拿來打B而已，他還可以拿來做很多事情喔～</p>

<p><a href="http://cssula.twgg.org/wp-content/uploads/2010/04/duke-waving.gif"><img src="/images/cssula-blog/duke-waving.gif"></a>想要一起DIY的人快快來喔～～</p>

<!-- more -->


<p>telnet 也是 tcp/ip 協議的一員，有許多應用層的服務用的是 TCP 協定，拿 HTTP 為例子，如果懂得 HTTP 的 Header 的話，可以透過 telnet 建立連線發送 HTTP 要求，又例如 SMTP 協定用的也是 TCP 來傳訊，如果懂得 SMTP 的 Header，一樣可以用 telnet 來寄信。</p>

<p>什麼！？沒有試過？好吧，大兜勉強示範一下怎麼用XD</p>

<p>首先，要確認電腦有 telnet 可以用。（如果已經確認有 telnet 則可跳過此段）</p>

<p>但如果閣下用的電腦是 Vista 或 Windows 7，會在執行 <code>telnet</code> 時看到「'telnet' 不是內部或外部命令、可執行的程式或批次檔。」</p>

<p>很多人以為 Windows 在 Vista 以後的版本沒有 telnet，其實不然，只是沒有啟動而已，只要做到如下步驟即可：</p>

<p>開始-&gt;控制台-&gt;程式集-&gt;程式和功能-&gt;開啟或關閉windows功能，找到「telnet用戶端」溝選並確認。</p>

<p><img src="/images/cssula-blog/Screenshot-21.png"></p>

<p>這下可以試試看輸入 <code>telnet bs2.to</code> 看看～</p>

<p><img src="/images/cssula-blog/Screenshot-22.png"></p>

<p>打 B 人人會，下面示範怎麼發送 HTTP Request 給 google 搜尋 「tonytonyjan」。</p>

<p>進入 telnet：</p>

<p><img src="/images/cssula-blog/Screenshot-23.png"></p>

<p>為了不要在連線後讓你的字打不出來，請在 open 之前打開 localecho。</p>

<p>輸入 <code>GET /search?q=tonytonyjan HTTP/1.1</code>，加上兩次 Enter：</p>

<p><img src="/images/cssula-blog/Screenshot-24.png"></p>

<p>哇～～～～啥鬼！！</p>

<p>嘿～別慌別慌，仔細一看，會發現這些是熟悉的 html 標籤，隱約可以找到一些熟悉的網址，看到我的網誌了嗎XD，各位可以觀察一下在 google 首頁搜尋 tonytonyjan 得到的結果頁面，他的原始碼正和這個一樣。瀏覽器的工作，其實就是發送一大堆類似我們剛剛打的 GET 要求，以及這裡沒有提到的 POST 要求。</p>

<p>也就是說…如果你想要讓自己的部落格的搜尋次數上升的話……嘿嘿，= =+（我可是什麼也沒說喔～～XD）</p>

<p>該是回題的時候了，在 Java 裡面該怎麼寫一個 telnet 呢？其實只要理解下面的程式碼就可以達到我上一句話沒有說的事情<sup>^"</sup></p>

<p>下面這是個簡單的 Java Telnet 程式，Java 的 Socket 讓我們可以很方便的建立起 TCP 連線。我們所要做的就只是打造兩條穩定的管子，一條是從 stdin 到 socket，把鍵盤的輸入送出去；一條是 socket 到 stdout，把收到的訊息印出來。這兩件事情要同步做，所以各開一個 Thread，在此大兜將這兩條管子分別打造成兩個 Class（SocketToOut和InToSocket），並且皆繼承自 Thread。</p>

<p>這支陽春的程式提供參考，歡迎改良～～各位慢慢品嚐吧XD</p>

<h3>碎碎念</h3>

<ol>
    <li>Telnet是許多駭……喔不……我是說是許多優良程式師的最愛</li>
    <li>Windows Vista和7並不是沒有telnet程式，只是沒有打開</li>
    <li>telnet屬於TCP/IP協議的一員，提供本機完成遠端工作的能力</li>
    <li><a href="http://zh.wikipedia.org/zh-tw/Http#.E4.BE.8B.E5.AD.90" target="_blank">這是</a>發送Http Request的例子</li>
    <li><a href="http://www.backup.idv.tw/viewtopic.php?=&amp;p=645" target="_blank">這是</a>發送SMTP Request來寄信的例子</li>
</ol>


<p>``` java
/<em>
 * Copyright 2010 CSsula.twgg.org. All Rights Reserved.
 * Author: Tony Jian
 </em>/
import java.io.<em>;
import java.net.</em>;</p>

<p>public class JavaTelnet{</p>

<pre><code>public static void main(String[] args) {
    String hostName;
    int port;
    InetAddress address;

    if(args.length == 2) {
        hostName = args[0];
        port = Integer.parseInt(args[1]);
    }else{
        System.out.println("Usage: java JavaTelnet address port");
        return;
    }

    try {
        address = InetAddress.getByName(hostName);
        try {
            Socket socket = new Socket(address, port);
            new SocketToOut(socket).start();
            new InToSocket(socket).start();
        } catch (IOException e) {
            System.err.println("Connection failed");
        }
    }
    catch(UnknownHostException e) {
        System.err.println("Unknown host");
    }
}
</code></pre>

<p>}</p>

<p>class SocketToOut extends Thread {</p>

<pre><code>private Socket socket;
private BufferedReader socketIn;

public SocketToOut(Socket socket) throws IOException{
    this.socket = socket;
    socketIn = new BufferedReader(new InputStreamReader(socket.getInputStream()));
}

@Override
public void run() {
    try {
        String line = null;
        while((line = socketIn.readLine()) != null) System.out.println(line);
        socket.close();
    } catch(IOException e) {
        System.out.println(e.toString());
    }
}
</code></pre>

<p>}</p>

<p>class InToSocket extends Thread {</p>

<pre><code>private Socket socket;
private PrintStream socketOut;
private BufferedReader in;

public InToSocket(Socket socket) throws IOException{
    this.socket = socket;
    socketOut = new PrintStream(socket.getOutputStream());
    in = new BufferedReader(new InputStreamReader(System.in));
}

@Override
public void run(){
    try {
        while(!socket.isClosed()) socketOut.println(in.readLine());
    } catch(IOException e){
        e.printStackTrace();
    }
}
</code></pre>

<p>}
```</p>

<p><img src="/images/cssula-blog/Screenshot-19.png">
<img src="/images/cssula-blog/Screenshot-20.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 Java 掃描閘道]]></title>
    <link href="http://tonytonyjan.github.com/2010/04/29/java-ports-scanning/"/>
    <updated>2010-04-29T08:27:15+08:00</updated>
    <id>http://tonytonyjan.github.com/2010/04/29/java-ports-scanning</id>
    <content type="html"><![CDATA[<p>這是一個用來掃描一台機器開放了哪些 port 的程式，主要用到了 Thread 與 Socket 兩個 Class。可能有人會說：「啥？這樣做可以幹麼呢？？」。嘿嘿，其實當一名駭客要試圖攻進一台機器時，掃描 port 是常見的第一步驟喔。這下不敢小看它了吧XD</p>

<p><img src="/images/cssula-blog/l2_javame_duke_sdk3.gif"></p>

<p>（圖文無關，只是偶然看到 Duke 和手機合影XD）</p>

<!-- more -->


<p>碎碎念：</p>

<ol>
    <li>主機預設ports有65536個（short型態）， port以1024為交界又可分兩部分</li>
    <li>1023以下的ports是常見的服務，且只能由該機器的root開啟port</li>
    <li>1024以上ports多用於client端</li>
    <li>Java裡與網路相關的Classes大部分放在java.net裡面</li>
    <li>Socet無法建立TCP連線的時候會丟出IOException</li>
    <li>getByName(String hostName); 失敗時會丟出UnknownHostException</li>
</ol>


<p>``` java
/<em>
 * Copyright 2010 CSsula.twgg.org. All Rights Reserved.
 * Author: Tony Jian
 </em>/
import java.io.<em>;
import java.net.</em>;</p>

<p>public class ScanPort extends Thread{</p>

<pre><code>int port;
String hostName;

public ScanPort(String hostName, int port){
    this.port = port;
    this.hostName = hostName;
}

public static void main(String[] args){
    for(int i=0;i&amp;lt;1024;i++){
        new ScanPort(args[0], i).start();
    }
}

@Override
public void run(){
    try{
        InetAddress address = InetAddress.getByName(hostName);
        try{
            Socket socket = new Socket(address, port); // The port is open if socket was created succeefully.
            System.out.printf("%nPort: %d Opened..", port);
            socket.close();
        }catch(IOException e){
            System.out.print("."); // The port isn't open if socket throws IOException.
        }
    }catch(UnknownHostException e){
        e.printStackTrace();
    }
}
</code></pre>

<p>}
```</p>

<p><img src="/images/cssula-blog/Screenshot-18.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一次喝 Java 就上癮-計畫序]]></title>
    <link href="http://tonytonyjan.github.com/2010/04/24/java-introduction/"/>
    <updated>2010-04-24T09:14:40+08:00</updated>
    <id>http://tonytonyjan.github.com/2010/04/24/java-introduction</id>
    <content type="html"><![CDATA[<p><img src="/images/cssula-blog/javaLogo.png">
<img src="/images/cssula-blog/duke.png"></p>

<p>（左邊是Java的Logo，右邊則是可愛的Java吉祥物，Duke&gt;///&lt;）</p>

<!--more-->


<p><span style="font-size: medium;"><strong>學習一個語言，有"<span style="font-size: large;"><span style="color: #ff0000;">愛</span></span>"很重要</strong></span></p>

<p><span style="font-size: medium;"><strong> </strong></span>這個世界存在的程式語言實在太多，但如果還是想粗略的一探多寡，<a href="http://en.wikipedia.org/wiki/List_of_programming_languages" target="_blank">維基</a>可以幫上一點忙，但是實際數量肯定是比這還要多更多的。除了一些耳熟能詳的程式語言元老如 C, C++, Java, Fortran……等等，至今仍屹立不搖；2009年11月，新的語言<a href="http://www.zimbu.org/" target="_blank">Zimbu</a>問世，同時Google也發布了<a href="http://golang.org/" target="_blank">go</a>。另外呢，這個月TIOBE軟體公司公佈了最新的<a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html" target="_blank">程式語言使用率統計</a>（這東西每個月都會更新一次），這個月C又再次奪回了第一名寶座，Java被C領先位居第二。語言的數目是多到數不清，關係與地位又瞬息萬變。然而儘管語言的種類是如此龐大，對於到底該學哪一個，大兜認為不是最重要的議題，於此大兜想分享一些建議：</p>

<ul>
<li><p>尋找一個您對它有"<span style="font-size: medium;"><strong><span style="color: #ff0000;">愛</span></strong></span>"的程式語言，並且持續不懈的了解它、發展它、熟悉它，不斷探索其背後原理、實做、理論根基、應用…等等，別急著什麼都學，等到根扎實、夠穩了，有時間再慢慢發展旁邊的枝葉。</p></li>
<li><p>大兜不會把您綁起來要脅去學Java，這只是我個人的因緣遭遇導致我選擇了 Java 當做我的樹根。除了Java之外您仍有很多選擇。</p></li>
</ul>


<p>重要的還是"<span style="font-size: medium;"><span style="color: #ff0000;"><strong>愛</strong></span></span>"啊～～～～<span style="font-size: medium;"><strong> </strong></span></p>

<p><span style="font-size: medium;"><strong>Java 的魅力</strong></span></p>

<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="480" height="385" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="allowFullScreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="src" value="http://www.youtube.com/v/SRLU1bJSLVg&amp;hl=zh_TW&amp;fs=1&amp;rel=0" /><param name="allowfullscreen" value="true" /><embed type="application/x-shockwave-flash" width="480" height="385" src="http://www.youtube.com/v/SRLU1bJSLVg&amp;hl=zh_TW&amp;fs=1&amp;rel=0" allowscriptaccess="always" allowfullscreen="true"></embed></object>


<p>其實不妨試著在 Google 上搜尋一下"<a href="http://www.google.com.tw/search?source=ig&amp;hl=zh-TW&amp;rlz=&amp;=&amp;q=java+%E7%89%B9%E8%89%B2&amp;meta=lr%3D&amp;aq=f&amp;aqi=g1&amp;aql=&amp;oq=&amp;gs_rfai=" target="_blank">Java 特色</a>"，會得到數量可觀的筆數。意思是如果我把它們全部列出來，可能會被批佔頁面。而由於每個Java 控喜愛 Java 的並理由不一樣，在此大兜只舉出一些自己之所以選擇 Java 的主要理由。</p>

<p>整個程式設計個過程可以說是一種對複雜度的控管，包括底層機器的複雜度、問題的複雜度。但也有許多語言如 VB、C++、Perl、SmallTalk 對於複雜度議題的解決有相當的成效，Python 更是以「降低程式開發與維護過程的複雜度」為目標而生。</p>

<p>話說將大兜引入程式設計這調不歸路的程式語言的並不是 Java，而是 C。正當我已經玩過 C 有一段時間，接觸 C++ 之際，被這所謂的「物件導向」式程式語言所吸引，C++能夠大大簡化以往C解決問題時所需要的複雜度。然而有些美中不足的是 C++ 脫離不了歷史的包袱，正因 C++ 正是承襲 C 而來，這原本為了物件導向而生的語言，卻因秉持「向下相容」的原則，在語法上及架構上徒增了不少特例。</p>

<p>當我漸漸的了解 Java 後，我發現 Java 其中一個深深吸引我的特性就是「簡單」，這除了因為它是一個號稱「純」的物件導向式程式語言外，還有替 name space 的控管有了 package 這個觀念。另外還有 javadoc 可以幫助編寫好的自文件化的程式碼立即轉換成網頁，能以最清楚明瞭的方式呈現給用戶端，利其使用。</p>

<p>Java 的另一項著名特色：「跨平台」亦是大兜喜愛的特性之一，也就是所謂的「Write once, run anywhere」（WORA）。這麼說是誇張了點，但實際上方法就是在每個用戶端裝上一個 Virtual Machine，讓所有的 java byte code可以運行其上。即使速度慢了點（真的是慢了一點點點點點點），但由於跨平台在很多應用上都很吃香，犧牲一些速度換取這樣優勢有其划算之處。</p>

<p>另外 Java 也簡化了網路程式設計的複雜度，同時也提高了安全性。以往對於撰寫各個不同作業系統的網路程式，必須費心思弄清楚各個作業系統上與網路相關的系統呼叫，然而 Java 因為其「寫一次跑各地」的特性而讓程式員得以免於這樣的煩惱。</p>

<p>Applet 是讓 Java 一舉成名的一項關鍵，它讓 Java 程式可以跑在網頁上，只要用戶端有裝瀏覽器與 JRE 便可以透過 html 中的 applet 標籤，執行遠地的 Java 程式， Java 標準函式庫提供了許多好用的繪圖函式，可以寫出如 flash 般動畫、遊戲，而 Java OpenGL 更是一項令人振奮的領域，使其配合 applet 可以在網頁順暢的玩起 3D 遊戲，不需要安裝任何東西，用戶只需要瀏覽器就足夠。</p>

<p>下面一些官方的 Applet 展示：</p>

<p><a href="http://java.sun.com/products/java-media/2D/samples/java2demo/Java2Demo.html" target="_blank">Java2D</a></p>

<p><a href="http://java.sun.com/products/java-media/2D/samples/java2demo/Java2Demo.html" target="_blank"><img src="/images/cssula-blog/Screenshot-17.png"></a></p>

<p><a href="https://jogl-demos.dev.java.net/applettest.html" target="_blank">JOGL</a></p>

<br class="spacer_" />


<p><span style="font-size: medium;"><strong>關於本計畫</strong></span></p>

<p>本文件的誕生是一個出自<span style="text-decoration: line-through;">吃飽太閒的死</span>大學生的學習分享計畫，在這之前並沒有任何技術文件的撰文經驗，任何訪客如對於之後的內容有任何疑問，歡迎切磋指教，如果能糾正我那就更好了。希望藉此計畫學習教學文件的杜撰與章法風格，另外雖知道網路上存在許多人跟我做著同樣的事，大兜只是想單純的<strong>分享自己所學的一點微薄知識，以及發現與發明的喜悅</strong>。這是這個計畫的唯一目的。</p>

<br class="spacer_" />


<p><span style="font-size: medium;"><strong>給讀者</strong></span></p>

<p>很歡迎很歡迎有讀者可以給予迴響、建議與指正，甚至一起討論，因為討論往往可以激盪出美麗火花，我很喜歡。只是萬一我哪裡錯了盡量不要大聲嗆我，拜託了，我是很脆弱的……QQ</p>

<br class="spacer_" />


<p>參考資料：</p>

<p>http://java.sun.com</p>

<p>Thinking in Java 4/e</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CPUSK1.1-Beta]]></title>
    <link href="http://tonytonyjan.github.com/2010/04/21/cpusk1.1-beta/"/>
    <updated>2010-04-21T05:38:46+08:00</updated>
    <id>http://tonytonyjan.github.com/2010/04/21/cpusk1.1-beta</id>
    <content type="html"><![CDATA[<p>還在想到底這篇文章要歸類為「實用軟體推薦」嗎？XD（真好意思說）</p>

<p><img src="/images/cssula-blog/Screenshot-15.png"></p>

<p>（ver1.1 Beta）<a href="http://www.cs.nctu.edu.tw/%7Ewhchien/CPUSK1.1-Beta.rar">載點</a></p>

<!--more-->


<p><strong>2010/4/15 更新至ver1.1 Beta</strong></p>

<h3>修正</h3>

<ul>
    <li>預設樂器多一個空白的問題</li>
    <li>視窗大小可以調整</li>
</ul>


<p>追加：</p>

<ul>
    <li>Search -  關鍵字搜尋（僅支援標題搜索，搜索時可用方向鍵上下移動）</li>
</ul>




<!--nextpage-->


<p><img src="/images/cssula-blog/Screenshot-14.png"></p>

<p>(Ver0.9 Beta)</p>

<p>CPUSK 的全名為 Central Police University Sheet Keeper（我真的想不到更合適的名字了……希望有文人可以幫忙命名＠＠），這個可愛的小工具的誕生只是因為筆者受到警大管樂團友人的委託。待過管樂團的都知道，演奏一首曲子如果要知道這首曲子需要哪些樂器，就要去查總譜。而這個工具正是為了這個目的而生。筆者早想做個圖形化視窗程式，但遲遲找不到主題，這下剛好可以藉這個機會來試試自己的能耐XD（上圖下方附上載點，有興趣的人可以拿來玩玩看，<strong>如果可以弄當它更好！</strong>但是請順便回報一下過程給我。</p>

<p>介面的設計是依照警大的實體表格，裡面有寫死的 46 個樂器，還有 18 個空格可以做擴充，為了讓對方可以快速入門，當然是設計一模一樣了＠＠（連放置位置也一樣）</p>

<p>目前最基本的加入、刪除、儲存功能都已經有了，只是啟動畫面、美工、About 等等都還沒做（我很懶），接下來會陸續增加是以「功能」為主：搜尋、播放、備註等等，等到功能豐富一點再開始搞美觀吧XD（不知道是什麼時候了…）</p>

<p>總之慢慢來（茶）</p>
]]></content>
  </entry>
  
</feed>
