<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Chrome | 不歸錄]]></title>
  <link href="http://tonytonyjan.github.com/categories/chrome/atom.xml" rel="self"/>
  <link href="http://tonytonyjan.github.com/"/>
  <updated>2012-06-06T17:42:40+08:00</updated>
  <id>http://tonytonyjan.github.com/</id>
  <author>
    <name><![CDATA[大兜]]></name>
    <email><![CDATA[tonytonyjan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[大兜的 Chrome Extension 學習筆記]]></title>
    <link href="http://tonytonyjan.github.com/2012/05/25/get-start-with-chrome-extension/"/>
    <updated>2012-05-25T12:12:00+08:00</updated>
    <id>http://tonytonyjan.github.com/2012/05/25/get-start-with-chrome-extension</id>
    <content type="html"><![CDATA[<p>要寫 Chrome Extension 的先決條件是擁有網頁基礎，因為寫 Chrome Extension 會用到 HTML、Javascript、CSS，如果還不會這些東西，建議在學習 Chrome Extension 之前，先把這些技能磨練好。</p>

<p>這篇介紹會針對 Chrome Extension 的 manifest 結構、檔案結構以及一些常用到的部份做簡單的介紹，包括 Browser Action、Page Action、Background Page 和 Content Script。</p>

<!-- more -->


<h2>架構簡介</h2>

<h3>Background Pages</h3>

<p>大多外掛會有一個 background page 常駐在背景，可能是一個 HTML 或者 javascript 檔，外掛的功能與邏輯都被定義在此，然後透過 API 與 UI（browser actions 或 page actions）做溝通。</p>

<p><img src="/images/arch-1.gif"></p>

<h3>UI Pages</h3>

<p>Chrome Extension 的 UI 介面使用的是 HTML，例如我們可以在 browser action 定義一個 popup.html ：</p>

<p><img src="/images/arch-2.gif"></p>

<p>Chrome Extension UI：
*   Browser Actions
*   Page Actions
*   Desktop Notifications
*   Omnibox
*   Override Pages
*   Options Pages
*   Context Menu：右鍵出現的內容</p>

<h2>Chrome Extension = Manifest + Web Assets</h2>

<p>一個 Chrome Extension 由一個 <code>manifest.json</code> 和其他網頁檔案組成，檔案目錄大概會像這個樣子：</p>

<p><img src="/images/chrome-ext.png"></p>

<p>除了 <code>manifest.json</code> 之外，其餘的檔案都是可選的，所以一個最簡單的（不具任何功能的） Chrome Extension 可以只由一個 <code>manifest.json</code> 組成，其他的檔案需要與否則視 <code>manifest.json</code> 裡頭的設定。Chrome Extension 之於 <code>manifest.json</code> 就像人之於個資一樣，裡面描述所有關於這個 Extension 的資料，包括名稱、敘述、版本、語言、使用的圖片等等。</p>

<h3>manifest.json 簡介</h3>

<p>``` json
{
  // 必要
  "name": "My Extension",
  "version": "versionString",
  "manifest_version": 2,</p>

<p>  // 建議，非必要
  "description": "A plain text description",
  "icons": { ... },
  "default_locale": "en",</p>

<p>  // 選一個
  "browser_action": {...},
  "page_action": {...},
  "theme": {...},
  "app": {...},</p>

<p>  // 其他視情況需要的設定
  "background": {...},
  "chrome_url_overrides": {...},
  "content_scripts": [...],
  "content_security_policy": "policyString",
  "file_browser_handlers": [...],
  "homepage_url": "http://path/to/homepage",
  "incognito": "spanning" or "split",
  "intents": {...},
  "key": "publicKey",
  "minimum_chrome_version": "versionString",
  "nacl_modules": [...],
  "offline_enabled": true,
  "omnibox": { "keyword": "aString" },
  "options_page": "aFile.html",
  "permissions": [...],
  "plugins": [...],
  "requirements": {...},
  "update_url": "http://path/to/updateInfo.xml",
  "web_accessible_resources": [...]
}
```</p>

<h4>version</h4>

<p>代表該 Extension 的版本，最多由四個整數組成，並且用 <code>.</code> 分開，數字必須介在 0 到 65535 之間，而且不可以以 0 當開頭，舉例：</p>

<ul>
<li>錯誤：

<ul>
<li>"version": "99999"</li>
<li>"version": "032"</li>
</ul>
</li>
<li>正確

<ul>
<li>"version": "1"</li>
<li>"version": "1.0"</li>
<li>"version": "2.10.2"</li>
<li>"version": "3.1.2.4567"</li>
</ul>
</li>
</ul>


<h4>manifest_version</h4>

<p>一個代表 manifest file 格式版本的整數，如果使用的是 Chrome 18 以上，則應該設定成 2。</p>

<pre><code>"manifest_version": 2
</code></pre>

<p>可以在<a href="http://code.google.com/chrome/extensions/manifestVersion.html">這裡</a>查閱版本 1 和 2 之間的差別。</p>

<h3>icons</h3>

<p>這邊可以定義 Chrome extension 的 logo。盡量是 PNG 格式，因為 Webkit 對 PNG 的透明度轉換最好。</p>

<p>``` json
{
  ...
  "icons": {</p>

<pre><code>"16": "icon16.png",
"48": "icon48.png",
"128": "icon128.png"
</code></pre>

<p>  },
  ...
}
```</p>

<ul>
<li>128x128：用在安裝時</li>
<li>48x48：在 <code>chrome://extensions</code> 裡顯示</li>
<li>16x16：favicon</li>
</ul>


<h2>Browser Action</h2>

<p><img src="/images/browser-action.png"></p>

<p>Browser action 適合在需要一個常駐的功能放在 Google 工具列時使用，可以加上 tooltip、badge（例如收到幾封信） 和 popup。</p>

<h3>Manifest</h3>

<p>``` json
{
  ...
  "browser_action": {</p>

<pre><code>"default_icon": "icon19.png",     // 可選
"default_title": "Tooltip title", // 可選
"default_popup": "popup.html"     // 可選，滑鼠單擊會呈現的內容
</code></pre>

<p>  },
  ...
}
```</p>

<h2>Page Action</h2>

<p><img src="/images/page-action.png"></p>

<p>類似 browser action，差別在於 page action 用於特定網頁才需要的功能，由於 browser action 常駐時會佔用一部份的記憶體，如果你的功能需要在特定狀況下才啟用，建議用 page action 取代 browser action。常見應用是 RSS 訂閱（只有網頁提供 RSS 時才啟用）。</p>

<h3>Manifest</h3>

<p>``` json
{
  ...
  "page_action": {</p>

<pre><code>"default_icon": "icons/foo.png", // 可選
"default_title": "Tooltip title",    // 可選
"default_popup": "popup.html"    // 可選，滑鼠單擊會呈現的內容
</code></pre>

<p>  },
  ...
}
```</p>

<p>設計原則：</p>

<ul>
<li>在功能只針對部份網頁時，使用 page action。</li>
<li>如果功能需要常駐在每個網頁，使用 browser action。</li>
</ul>


<h2>Content Script</h2>

<p>這是筆者認為最有趣的部份，content script 顧名思義可以在頁面裡面嵌入 javascript，他們可以透過 DOM 得知使用者瀏覽的頁面的內容，甚至可以改變這些內容。</p>

<p>這些是 content script 可以做到的事：</p>

<ul>
<li>爬出所有沒有 <code>&lt;a&gt;</code> 的 URL，為他們加上 <code>&lt;a&gt;</code></li>
<li>把字放大</li>
<li>去掉廣告</li>
</ul>


<p>基本上可以在 chrome 開發人員視窗中能做到的事情，content script 都可以做到。但這功能看似強大，卻有些限制：</p>

<ul>
<li><strong>無法</strong>呼叫 <code>chrome.* APIs</code> 這類的 API（<code>chrome.extension</code> 除外）</li>
<li><strong>無法</strong>使用 extension page 上的變數和函式（例如 background pages）</li>
<li><strong>無法</strong>使用網頁上的變數和函式</li>
</ul>


<p>但這些限制可以透過 <code>chrome.extension</code> 與 extension pages 做溝通。</p>

<h2>Manifest</h2>

<p>``` json
{
  ...
  "content_scripts": [</p>

<pre><code>{
  "matches": ["http://www.google.com/*"],
  "css": ["mystyles.css"],
  "js": ["jquery.js", "myscript.js"]
}
</code></pre>

<p>  ],
  ...
}
```</p>

<h3>matches</h3>

<p>常用的格式：</p>

<ul>
<li><p>http://127.0.0.1/*</p>

<p>指定某個 host 下的所有 path</p></li>
<li><p>http://example.org/foo/bar.html</p>

<p>指定某個連結</p></li>
<li><p>&lt;all_urls&gt;</p>

<p>在所有的頁面（這樣的狀況不多，但惡作劇的時候可能會用到）</p></li>
</ul>


<p>其他用法<a href="http://code.google.com/chrome/extensions/match_patterns.html">詳見此</a></p>

<h2>Background Pages</h2>

<p>一個 extension 通常要有一個常駐執行的 script，用來控制 Browser UI（page action 或 browser action），例如我們會需要一個常駐的程式去監聽 FB 是否有新的訊息，如果聽到則在 browser actoin 上面顯示 badge，收信亦如是。</p>

<p>同時如果 content script 需要與 UI 做溝通，要定義的 function 都放在這裡。</p>

<h3>Manifest</h3>

<p>如果內容很少，可以寫在一個檔案即可：</p>

<p>``` json
{
  ...
  "background": {</p>

<pre><code>"scripts": ["background.js"]
</code></pre>

<p>  },
  ...
}
```</p>

<p>如果內容很多，要分成好幾個 <code>.js</code> 檔，則改用以下方式並配合 <code>&lt;script&gt;</code> 標籤：</p>

<p>``` json
{
  ...
  "background": {</p>

<pre><code>"page": "background.html"
</code></pre>

<p>  },
  ...
}
```</p>
]]></content>
  </entry>
  
</feed>
